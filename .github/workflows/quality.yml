name: Code Quality Checks

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.json'
      - 'src/**/*.{html,js,ts,svelte,css}'
  pull_request:
    paths:
      - '**/*.json'
      - 'src/**/*.{html,js,ts,svelte,css}'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write

concurrency:
  group: quality-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Restore Bun cache
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      ########################################################################
      # Prettier formatting check
      ########################################################################
      - name: Run Prettier (write mode)
        id: prettier
        shell: bash
        run: |
          set -e
          
          # Ensure we have full git history for diff
          git fetch origin main --depth=50 || true
          
          # Collect changed files for the current push or PR (handle shallow/initial commits)
          globs=( '*.json' '*.ts' '*.tsx' '*.js' '*.jsx' '*.svelte' '*.css' '*.html' )
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            changed_files="$(git diff --name-only origin/main...HEAD -- "${globs[@]}" 2>/dev/null || true)"
            if [ -z "$changed_files" ] && git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
              changed_files="$(git diff --name-only HEAD~1 HEAD -- "${globs[@]}" 2>/dev/null || true)"
            fi
          else
            if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
              changed_files="$(git diff --name-only HEAD~1 HEAD -- "${globs[@]}" 2>/dev/null || true)"
            else
              # Initial commit or shallow checkout without parent; lint all tracked files
              changed_files="$(git ls-files "${globs[@]}")"
            fi
          fi

          if [ -z "$changed_files" ]; then
            echo "No files to format with Prettier."
            exit 0
          fi

          # Filter to only existing files and run Prettier
          existing_files=""
          for file in $changed_files; do
            if [ -f "$file" ]; then
              existing_files="$existing_files $file"
            fi
          done
          
          if [ -n "$existing_files" ]; then
            echo "$existing_files" | xargs bunx prettier --write
          fi

      - name: Suggest Prettier fixes (same-repo PRs only)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        uses: reviewdog/action-suggester@v1
        with:
          tool_name: prettier
          level: info

      ########################################################################
      # JSON validation
      ########################################################################
      - name: Install jq for JSON validation
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Validate JSON files
        id: jsonval
        shell: bash
        run: |
          set +e
          echo "ðŸ”Ž Validating JSON files..."
          
          # Ensure we have full git history for diff
          git fetch origin main --depth=50 || true
          
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            json_files="$(git diff --name-only origin/main...HEAD -- '*.json' 2>/dev/null || true)"
            if [ -z "$json_files" ] && git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
              json_files="$(git diff --name-only HEAD~1 HEAD -- '*.json' 2>/dev/null || true)"
            fi
          else
            if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
              json_files="$(git diff --name-only HEAD~1 HEAD -- '*.json' 2>/dev/null || true)"
            else
              json_files="$(git ls-files '*.json')"
            fi
          fi

          if [ -z "$json_files" ]; then
            echo "No JSON files changed" > /tmp/json_diag.log
            exit 0
          fi

          diag=""
          for file in $json_files; do
            if [ -f "$file" ]; then
              jq empty "$file" 2>/dev/null
              if [ $? -ne 0 ]; then
                diag+="$file:1: Invalid JSON\n"
              fi
            fi
          done
          echo -e "$diag" | tee /tmp/json_diag.log

      - name: Setup reviewdog (same-repo PRs)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      - name: Annotate JSON validation (PR review)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          reviewdog -efm="%f:%l:%m" -name="json-validator" -reporter=github-pr-review -fail-on-error=false < /tmp/json_diag.log 

      - name: Setup reviewdog (checks for forks/push)
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      - name: Annotate JSON validation (checks for forks/push)
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository
        run: |
          reviewdog -efm="%f:%l:%m" -name="json-validator" -reporter=github-check -fail-on-error=false < /tmp/json_diag.log 

      ########################################################################
      # Biome Lint (advisory)
      ########################################################################
      - name: Run Biome lint
        shell: bash
        run: |
          set +e
          bunx biome lint . --formatter compact > /tmp/biome.log || true

      - name: Annotate Biome results (PR review)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          reviewdog -efm="%f:%l:%c %m" -name="biome-lint" -reporter=github-pr-review -fail-on-error=false < /tmp/biome.log

      - name: Setup reviewdog (checks for forks/push)
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      - name: Annotate Biome results (checks for forks/push)
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository
        run: |
          reviewdog -efm="%f:%l:%c %m" -name="biome-lint" -reporter=github-check -fail-on-error=false < /tmp/biome.log

      ########################################################################
      # media_data.json validation via reviewdog (advisory)
      ########################################################################
      - name: Validate data files (gated by changes)
        run: |
          changed_media=false
          changed_feeds=false
          changed_locales=false
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            base_sha=$(jq -r '.pull_request.base.sha // empty' "$GITHUB_EVENT_PATH")
            head_sha=$(jq -r '.pull_request.head.sha // empty' "$GITHUB_EVENT_PATH")
            if [ -n "$base_sha" ] && [ -n "$head_sha" ]; then
              git fetch origin "$base_sha" --depth=1 || true
              git fetch origin "$head_sha" --depth=1 || true
              diff_files=$(git diff --name-only "$base_sha" "$head_sha")
              echo "$diff_files" | grep -q '^media_data.json$' && changed_media=true || true
              echo "$diff_files" | grep -q '^kite_feeds.json$' && changed_feeds=true || true
              echo "$diff_files" | grep -E -q '^src/lib/locales/.+\.json$' && changed_locales=true || true
            fi
          else
            diff_files=$(git diff --name-only HEAD~1 HEAD || true)
            echo "$diff_files" | grep -q '^media_data.json$' && changed_media=true || true
            echo "$diff_files" | grep -q '^kite_feeds.json$' && changed_feeds=true || true
            echo "$diff_files" | grep -E -q '^src/lib/locales/.+\.json$' && changed_locales=true || true
          fi

          if [ "$changed_media" = true ]; then
            bun scripts/validate-media.ts 2> /tmp/media_diag.log || true
          else
            echo "media_data.json unchanged; skipping validator" > /tmp/media_diag.log
          fi

          # Gate feeds/locales checks via sort scripts in advisory mode
          if [ "$changed_feeds" = true ]; then
            bun scripts/sort-feeds.ts --output-issues --output-file feeds-issues.json || true
            # Run enhanced feed validator for network/content checks; advisory annotations
            bun scripts/validate-feeds.ts > /tmp/feeds_diff.patch 2> /tmp/feeds_diag.log || true
          fi
          if [ "$changed_locales" = true ]; then
            bun scripts/sort-locales.ts --output-issues --output-file locales-issues.json || true
          fi

      - name: Annotate media-data issues (PR review)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -f /tmp/media_diag.log ]; then
            reviewdog -efm="%f:%l:%m" -name="media-validator" -reporter=github-pr-review -fail-on-error=false < /tmp/media_diag.log
          else
            echo "/tmp/media_diag.log missing; skipping media annotations"
          fi

      - name: Setup reviewdog (checks for forks/push)
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      - name: Annotate media-data issues (checks for forks/push)
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository
        run: |
          if [ -f /tmp/media_diag.log ]; then
            reviewdog -efm="%f:%l:%m" -name="media-validator" -reporter=github-check -fail-on-error=false < /tmp/media_diag.log
          else
            echo "/tmp/media_diag.log missing; skipping media annotations"
          fi

      - name: Annotate feed validation (PR review)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -f /tmp/feeds_diag.log ]; then
            reviewdog -efm="%f:%l:%m" -name="feed-validator" -reporter=github-pr-review -fail-on-error=false < /tmp/feeds_diag.log
          fi

      - name: Setup reviewdog (checks for forks/push)
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      - name: Annotate feed validation (checks for forks/push)
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository
        run: |
          if [ -f /tmp/feeds_diag.log ]; then
            reviewdog -efm="%f:%l:%m" -name="feed-validator" -reporter=github-check -fail-on-error=false < /tmp/feeds_diag.log
          fi